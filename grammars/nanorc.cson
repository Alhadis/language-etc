name: ".nanorc"
scopeName: "source.nanorc"
fileTypes: [
	"nanorc"
	"nanorc.in"
	"nanorc.sample"
]
limitLineLength: no
maxTokensPerLine: 2048
patterns: [
	{include: "injections.etc#scopeHack"}
	{include: "#main"}
]
firstLineMatch: """(?x)

	# Emacs modeline
	-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		(?i:nanorc)
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-
	
	|
		
	# Vim modeline
	(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
	(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
	(?:filetype|ft|syntax)[ \\t]*=
		(?i:nanorc)
	(?=$|\\s|:)
"""
injections:
	"meta.preprocessor.include.nanorc string.quoted.double, meta.option.backupdir.nanorc":
		patterns: [{
			name: "keyword.operator.tilde.nanorc"
			match: '(?<=")~(?=/)'
		}, include: "etc#globSimple"]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#key"}
			{include: "#option"}
			{include: "#syntax"}
			{include: "#syntaxCommands"}
			{include: "#other"}
		]

	# Parameter list of a colour specification: “[bold,][italic,]fgColour[,bgColour]”
	colourParams:
		match: """(?x) \\G
			(?:
				\\s+
				(?: (\\[)? (bold)   (,) (\\])?)?
				(?: (\\[)? (italic) (,) (\\])?)?
				(?<=,\\]|,)
			)?+ \\s*
			(?:
				(?=$|\\s)
				|
				(?= (?!bold|italic) [^\\s,]
				| , (?!bold|italic) [^\\s,]
				) ([^\\s,]*) (,)? ([^\\s,]*) (?!,)
			)
		"""
		captures:
			2:  name: "constant.language.style.bold.nanorc"
			6:  name: "constant.language.style.italic.nanorc"
			9:  name: "meta.foreground-colour.nanorc", patterns: [include: "#colourParam"]
			11: name: "meta.background-colour.nanorc", patterns: [include: "#colourParam"]
			1:  patterns: [include: "etc#bracket"]
			4:  patterns: [include: "etc#bracket"]
			5:  patterns: [include: "etc#bracket"]
			8:  patterns: [include: "etc#bracket"]
			3:  patterns: [include: "etc#comma"]
			7:  patterns: [include: "etc#comma"]
			10: patterns: [include: "etc#comma"]
	
	# Colour keywords
	colourParam:
		patterns: [{
			# Named colours
			name: "constant.language.colour.named.$1.nanorc"
			match: """(?x)
				(?:(?<=,|\\s)|^|\\G)
				(
					# Basic colour swatches for 8-colour terminals
					(?:bright|light)?
					(?:black|blue|cyan|green|magenta|red|white|yellow)
					|
					# Synonym for “lightblack”
					gr[ae]y
					|
					# 256-colour values
					(?:beet|brick|brown|crimson|lagoon|latte|lime|mauve|mint|normal|ocher
					|orange|peach|pink|plum|purple|rosy|sage|sand|sea|sky|slate|tawny|teal)
				)
				(?=$|,|\\s)
			"""
		},{
			# 3-digit hexadecimal value: “#rgb”
			name:  "constant.language.colour.hex.nanorc"
			match: "(?:(?<=,|\\s)|^|\\G)(#)[A-Fa-f0-9]{3}(?=$|,|\\s)"
			captures:
				1: name: "punctuation.definition.constant.colour.nanorc"
		},{
			# Unrecognised colour
			match: "(?:(?<=,|\\s)|^|\\G)([bf]gcolou?r)|([^\\s,]+)(?=$|,|\\s)"
			captures:
				1: name: "constant.language.colour.placeholder.nanorc"
				2: name: "invalid.illegal.colour.unsupported.nanorc" 
		}]
	
	# Comment line
	comment:
		name:  "comment.line.number-sign.nanorc"
		begin: "#"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.nanorc"
	
	# Keybinding commands
	key:
		patterns: [
			{include: "#keyBind"}
			{include: "#keyUnbind"}
		]
	
	keyBind:
		patterns: [{
			# User-defined command: “bind key "string" menu”
			name:  "meta.bind.nanorc"
			match: '^\\s*(bind)\\s+(\\S+)\\s+((")(.*)("))(?:\\s+([^\\s"]+))?(?=\\s*$|\\s+#)'
			captures:
				1: name: "keyword.operator.key.bind.nanorc"
				2: patterns: [include: "#keyName"]
				3: name: "string.quoted.double.nanorc"
				4: name: "punctuation.definition.string.begin.nanorc"
				6: name: "punctuation.definition.string.end.nanorc"
				5: patterns: [{
					# Named editor function
					name: "meta.command-name.nanorc"
					begin: "({)"
					end:   "(})"
					beginCaptures:
						0: name: "punctuation.section.bracket.curly.begin.nanorc"
						1: name: "brackethighlighter.curly"
					endCaptures:
						0: name: "punctuation.section.bracket.curly.end.nanorc"
						1: name: "brackethighlighter.curly"
					contentName: "entity.name.function.nanorc"
				}, include: "#keyName"]
				7: name: "constant.other.menu-name.nanorc"
		},{
			# Existing command: “bind key function menu”
			name:  "meta.bind.nanorc"
			match: '^\\s*(bind)\\s+(\\S+)\\s+([^"\\s]+)(?:\\s+([^\\s"]+))?(?=\\s*$|\\s+#)'
			captures:
				1: name: "keyword.operator.key.bind.nanorc"
				2: patterns: [include: "#keyName"]
				3: name: "entity.name.function.nanorc"
				4: name: "constant.other.menu-name.nanorc"
		}]
	
	keyUnbind:
		match: '^\\s*(unbind)\\s+(\\S+)(?:\\s+([^\\s"]+))?(?=\\s*$|\\s+#)'
		captures:
			1: name: "keyword.operator.key.unbind.nanorc"
			2: patterns: [include: "#keyName"]
			3: name: "constant.other.menu-name.nanorc"
	
	keyName:
		begin: "(?:^|\\G)(Sh(-))?(M(-))?((\\^))?"
		end:   "\\S+|(?=$|\\s)"
		beginCaptures:
			0: name: "meta.key.modifiers.nanorc"
			1: name: "entity.name.tag.key.modifier.shift.nanorc"
			3: name: "entity.name.tag.key.modifier.meta.nanorc"
			5: name: "entity.name.tag.key.modifier.ctrl.nanorc"
			2: name: "punctuation.definition.modifier.dash.nanorc"
			4: name: "punctuation.definition.modifier.dash.nanorc"
			6: name: "punctuation.definition.modifier.caret.nanorc"
		endCaptures: 0: patterns: [
			# Named keys
			{match: "^Bsp$",   name: "entity.name.tag.key.backspace.nanorc"}
			{match: "^Del$",   name: "entity.name.tag.key.delete.nanorc"}
			{match: "^Down$",  name: "entity.name.tag.key.down.nanorc"}
			{match: "^End$",   name: "entity.name.tag.key.end.nanorc"}
			{match: "^Enter$", name: "entity.name.tag.key.enter.nanorc"}
			{match: "^Home$",  name: "entity.name.tag.key.home.nanorc"}
			{match: "^Ins$",   name: "entity.name.tag.key.insert.nanorc"}
			{match: "^Left$",  name: "entity.name.tag.key.left.nanorc"}
			{match: "^PgDn$",  name: "entity.name.tag.key.page-down.nanorc"}
			{match: "^PgUp$",  name: "entity.name.tag.key.page-up.nanorc"}
			{match: "^Right$", name: "entity.name.tag.key.right.nanorc"}
			{match: "^Space$", name: "entity.name.tag.key.space.nanorc"}
			{match: "^Tab$",   name: "entity.name.tag.key.tab.nanorc"}
			{match: "^Up$",    name: "entity.name.tag.key.up.nanorc"}
			
			# Anything else
			match: "^(?:(F(1[0-9]|2[0-4]|[1-9]))|(\\S))$"
			captures:
				1: name: "entity.name.tag.key.function.$2.nanorc"
				3: name: "entity.name.tag.key.verbatim.nanorc"
		]
	
	# Configuration command
	option:
		name:  "meta.option.$2.nanorc"
		begin: "^\\s*(set|unset)(?=\\s+([a-z][a-z_0-9]*))"
		end:   "$"
		beginCaptures:
			1: name: "keyword.operator.$1.nanorc"
		patterns: [include: "#optionInnards"]
	
	optionInnards:
		patterns: [{
			# Numeric options
			begin: "\\G\\s*(fill|guidestripe|tabsize)(?=\\s|$)"
			end:   "$"
			beginCaptures:
				1: name: "entity.option.name.nanorc"
			patterns: [{
				name: "constant.numeric.integer.int.decimal.nanorc"
				match: "[0-9]+"
			}]
		},{
			# Niladic (boolean-type) options
			begin: """(?x) \\G \\s*
				(afterends|allow_insecure_backup|atblanks|autoindent|backup|boldtext|bookstyle|breaklonglines
				|casesensitive|colonparsing|constantshow|cutfromcursor|emptyline|historylog|indicator|jumpyscrolling
				|linenumbers|locking|magic|minibar|mouse|multibuffer|noconvert|nohelp|nonewlines|nowrap|positionlog
				|preserve|quickblank|rawsequences|rebinddelete|regexp|saveonexit|showcursor|smarthome|softwrap
				|stateflags|tabstospaces|trimblanks|unix|wordbounds|zap|zero)
				(?=\\s|$)"""
			end: "$"
			beginCaptures:
				1: name: "entity.option.name.nanorc"
		},{
			# Colour-type options
			begin: """(?x) \\G \\s*
				((error|function|key|mini|number|prompt|scroller|selected|spotlight|status|stripe|title)color)
				(?=\\s|$)"""
			end: "$"
			beginCaptures:
				1: name: "entity.option.name.nanorc"
			patterns: [include: "#colourParams"]
		},{
			# Command-type options
			begin: "\\G\\s*(speller)(?=\\s|$)[ \\t]*"
			end:   "$"
			beginCaptures:
				1: name: "entity.option.name.nanorc"
			patterns: [{
				match: '\\G(")(.+)(?:(")(?=[^"]*$)|(?=$))'
				captures:
					0: name: "string.quoted.double.nanorc"
					1: name: "punctuation.definition.string.begin.nanorc"
					2: name: "source.embedded.shell", patterns: [include: "source.shell"]
					3: name: "punctuation.definition.string.end.nanorc"
			}]
		},{
			# String-type options
			begin: """(?x) \\G \\s*
				(backupdir|brackets|matchbrackets|operatingdir|punct|whitespace|wordchars)
				(?=\\s|$)"""
			end: "$"
			patterns: [include: "#string"]
			beginCaptures:
				1: name: "entity.option.name.nanorc"
		},{
			# RegExp-type options
			begin: "\\G\\s*(quotestr)(?=\\s|$)"
			end:   "$"
			beginCaptures:
				1: name: "entity.option.name.nanorc"
			patterns: [include: "#regexp"]
		},{
			# Unrecognised (user-defined?) fields
			name:  "meta.custom-option.nanorc"
			begin: "\\G\\s*(\\S+)"
			end:   "$"
			beginCaptures:
				1: name: "entity.option.name.nanorc"
			patterns: [{
				# Boolean-ish keywords
				name: "constant.logical.boolean.$1.nanorc"
				match: "\\b(true|false|on|off|yes|no)\\b"
			},{
				# Numbers
				name: "constant.numeric.decimal.nanorc"
				match: "[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?=\\s|$)"
			}, include: "#regexp"]
		}]

	# Directives that don't belong anywhere else
	other:
		patterns: [{
			# Include directives
			name: "meta.preprocessor.include.nanorc"
			begin: "^\\s*(include)(?=\\s|$)[ \\t]*"
			end:   "$"
			beginCaptures:
				1: name: "keyword.control.directive.include.nanorc"
			contentName: "meta.import.file-name.nanorc"
			patterns: [include: "#string"]
		},{
			# Override syntax property
			name:  "meta.override.nanorc"
			begin: "^\\s*(extendsyntax)\\s+(\\S+)[ \\t]*"
			end:   "$"
			beginCaptures:
				1: name: "keyword.control.directive.extendsyntax.nanorc"
				2: name: "variable.parameter.syntax-name.nanorc"
			patterns: [
				{include: "#syntaxCommands"}
				{include: "#optionInnards"}
			]
		}]

	# Strings
	string:
		patterns: [
			{include: "#quotedString"}
			{include: "#unquotedString"}
		]

	# "Double-quoted" string
	quotedString:
		name:  "string.quoted.double.nanorc"
		begin: '"'
		end:   '"(?=[^"]*$)|(?=$)'
		beginCaptures: 0: name: "punctuation.definition.string.begin.nanorc"
		endCaptures:   0: name: "punctuation.definition.string.end.nanorc"
	
	# Bareword/unquoted string
	unquotedString:
		name:  "string.unquoted.bareword.nanorc"
		match: "\\S+"
	
	# Regular expression
	regexp:
		name:  "string.regexp.embedded.nanorc"
		begin: '(")"?+'
		end:   '"(?=\\s|$)|(?=$)'
		beginCaptures: 1: name: "punctuation.definition.string.begin.nanorc"
		endCaptures:   0: name: "punctuation.definition.string.end.nanorc"
		patterns: [
			{match: '(?:"(?!\\s|$))+'}
			{include: "source.regexp"}
		]
	
	# Syntax highlighting definitions
	syntax:
		patterns: [{
			# Preset/reserved syntax names
			name: "meta.syntax.nanorc"
			match: "^\\s*(syntax)\\s+(none|default)(?=\\s|$)"
			captures:
				1: name: "storage.type.var.syntax.name.nanorc"
				2: name: "support.constant.language.$2.nanorc"
		},{
			# User-defined syntax
			name:  "meta.syntax.nanorc"
			begin: '^\\s*(syntax)(?:\\s+((")[^"]+(")|\\S+)(?:\\s+(.*))?)?\\s*$\\s*'
			end:   "^(?=\\s*syntax)"
			beginCaptures:
				1: name: "storage.type.var.syntax.name.nanorc"
				2: name: "entity.syntax.name.nanorc"
				3: name: "punctuation.definition.name.begin.nanorc"
				4: name: "punctuation.definition.name.end.nanorc"
				5: patterns: [include: "#regexp"]
			patterns: [include: "#main"]
		}]

	# Commands related to syntax highlighting definitions
	syntaxCommands:
		patterns: [{
			# Filetype detection patterns
			applyEndPatternLast: yes
			name:  "meta.$1-pattern.nanorc"
			begin: '(?:^|\\G)\\s*(header|magic)(?=$|\\s)[ \\t]*'
			end:   "(?!\\G)"
			beginCaptures:
				1: name: "keyword.operator.command.$1.nanorc"
			patterns: [include: "#regexp"]
		},{
			# Comment string
			name:  "meta.comment-string.nanorc"
			begin: "(?:^|\\G)\\s*(comment)(?=$|\\s)[ \\t]*"
			end:   "$"
			beginCaptures:
				1: name: "keyword.operator.command.$1.nanorc"
			patterns: [{
				name: "string.quoted.double.comments.disable.nanorc"
				match: '\\G(")(")(?=\\s*$|\\s+#)'
				captures:
					1: name: "punctuation.definition.string.begin.nanorc"
					2: name: "punctuation.definition.string.end.nanorc"
			},{
				# Bracket-style comments: “/*|*/”
				name: "string.quoted.double.comments.bracket-style.comment"
				match: '\\G(")([^\\|]+)(\\|)([^\\|]+)(")(?=\\s*$|\\s+#)'
				captures:
					1: name: "punctuation.definition.string.begin.nanorc"
					2: name: "constant.other.bracket.begin.nanorc"
					3: name: "meta.separator.brackets.nanorc"
					4: name: "constant.other.bracket.end.nanorc"
					5: name: "punctuation.definition.string.end.nanorc"
			},{
				# Verbatim
				name: "string.quoted.double.comments.verbatim.nanorc"
				match: '(").+(")(?=\\s*$|\\s+#)'
				captures:
					1: name: "punctuation.definition.string.begin.nanorc"
					2: name: "punctuation.definition.string.end.nanorc"
			}]
		},{
			# String inserted when pressing <Tab>
			name:  "meta.tabgives.nanorc"
			begin: "(?:^|\\G)\\s*(tabgives)(?=$|\\s)"
			end:   "$"
			beginCaptures:
				1: name: "keyword.operator.command.$1.nanorc"
			patterns: [include: "#string"]
		},{
			# External command references
			name:  "meta.$1.nanorc"
			match: "(?:^|\\G)\\s*(formatter|linter)(?=$|\\s)(.*)$"
			captures:
				1: name: "keyword.operator.command.$1.nanorc"
				2: name: "source.embedded.shell", patterns: [include: "source.shell"]
		},{
			# Syntax highlighting colours
			name:  "meta.colour.nanorc"
			begin: "(?:^|\\G)\\s*(i?color)(?=\\s|$)"
			end:   "$"
			beginCaptures:
				1: name: "storage.type.var.colour.name.nanorc"
			patterns: [include: "#colourParams", {
				# Start/end patterns (incomplete)
				name:  "meta.$1-pattern.nanorc"
				match: '(?<=\\s|\\G)(start|end)(=)(?=\\s|$)'
				captures:
					1: name: "variable.parameter.attribute.nanorc"
					2: name: "punctuation.definition.assignment.equals-sign.nanorc"
			},{
				# Start/end patterns
				name:  "meta.$1-pattern.nanorc"
				begin: '(?<=\\s|\\G)(start|end)(=)(?=")'
				end:   '(?<=")'
				captures:
					1: name: "variable.parameter.attribute.nanorc"
					2: name: "punctuation.definition.assignment.equals-sign.nanorc"
				patterns: [include: "#regexp"]
			}, include: "#regexp"]
		}]
