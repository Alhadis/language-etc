name: "Ignore List"
scopeName: "source.gitignore"
fileTypes: [
	"gitignore"
	"git/ignore"
	"git/info/exclude"
	"gitignore-global"
	"gitignore_global"
	"gitignore.global"
	"sparse-checkout"
	
	# Mutually-compatible formats
	"alexignore"
	"atomignore"
	"babelignore"
	"coffeelintignore"
	"dockerignore"
	"eleventyignore"
	"eslintignore"
	"markdownlintignore"
	"nodemonignore"
	"npmignore"
	"prettierignore"
	"stylelintignore"
	"vercelignore"
	"vscodeignore"
	
	# Almost-compatible formats (syntax doesn't conflict with Git)
	"bazaar/ignore"
	"breezy/ignore"
	"bzrignore"
	"cpyskip.txt"
	"cvsignore"
	"slugignore"
]
patterns: [include: "#main"]
firstLineMatch: """(?x)

	# Emacs modeline
	-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		(?i:git-?ignore|ignore-?list)
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-
	
	|
		
	# Vim modeline
	(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
	(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
	(?:filetype|ft|syntax)[ \\t]*=
		(?i:git-?ignore|ignore-?list)
	(?=$|\\s|:)
"""

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#cvsSyntax"}
			{include: "#magic"}
			{include: "#pattern"}
			{include: "#escape"}
		]

	# GNU Bazaar-specific syntax (not used by Git)
	# - # http://doc.bazaar.canonical.com/beta/en/user-reference/ignore-help.html
	bazaarPrefixes:
		patterns: [{
			# — “To ignore patterns that begin with [#], use the “RE:” prefix”
			name:  "storage.modifier.bazaar.re-prefix.gitignore"
			match: "^RE(:)(?=\\S)"
		},{
			# — “Patterns prefixed with ‘!!’ act as regular ignore patterns,
			#    but have precedence over the ‘!’ exception patterns.”
			name: "keyword.operator.logical.not.negation.elevated.bazaar.gitignore"
			match: "^!!(?=\\S)"
		}]

	# Comment line
	comment:
		name:  "comment.line.number-sign.gitignore"
		begin: "^\\s*(#)"
		end:   "$"
		beginCaptures:
			1: name: "punctuation.definition.comment.gitignore"
	
	# CVS-specific syntax header
	cvsSyntax:
		match: "\\A(syntax)(:)\\s+(glob)$"
		captures:
			1: name: "variable.parameter.assignment.glob-syntax.cvs.gitignore"
			2: name: "keyword.operator.assignment.separator.key-value.cvs.gitignore"
			3: name: "support.constant.language.syntax-type.cvs.gitignore"
	
	# Escaped character
	escape:
		name: "constant.character.escape.backslash.gitignore"
		match: "(\\\\)."
		captures:
			1: name: "punctuation.definition.escape.backslash.gitignore"

	# Git-specific magic signatures
	magic:
		patterns: [{
			# Long-form: “:(foo,bar)…”
			name:  "meta.magic-signature.long.gitignore"
			begin: "^(:)(\\()(?=.*?\\))"
			end:   "(?<!\\\\)\\)|(?=\\s*$)"
			beginCaptures:
				1: name: "keyword.operator.signature.begin.gitignore"
				2: name: "punctuation.section.signature.begin.gitignore"
			endCaptures:
				0: name: "punctuation.section.signature.end.gitignore"
			patterns: [
				{include: "#escape"}
				{include: "#magicInnards"}
			]
		},{
			# Short-form: ":${MNEMONIC}pattern.*"
			name:  "meta.magic-signature.short.gitignore"
			match: "^(:)([!^]+)"
			captures:
				1: name: "keyword.operator.signature.begin.gitignore"
				2: name: "keyword.operator.mnemonic.gitignore"
		}]
	
	# Symbols matched in short-form magic signatures: `:!pattern`
	magicMnemonic:
		patterns: [
			{match: "-", name: "keyword.operator.logical.not.negation.gitignore"}
			{match: "!", name: "keyword.operator.unset.delete.gitignore"}
		]
	
	# Stuff matched inside `:(long,form=signatures)`
	magicInnards:
		patterns: [{
			include: "etc#comma"
		},{
			# Attribute list: :(attr:foo bar=baz !not)
			name:  "meta.attribute-list.gitignore"
			begin: "(?:\\G|(?<=,|\\())(attr)(:)"
			end:   "(?=,|\\)|$)"
			beginCaptures:
				1: name: "keyword.control.magic-signature.$1.gitignore"
				2: patterns: [include: "etc#colon"]
			patterns: [{
				name: "meta.attribute.gitignore"
				match: "(-|!)?((?:[^\\\\\\s=\\(\\),]|\\\\.)++)(?:(=)((?:[^\\\\\\s=\\(\\),]|\\\\.)*+))?"
				captures:
					1: patterns: [include: "#magicMnemonic"]
					2: name: "variable.parameter.attribute.gitignore", patterns: [include: "#escape"]
					3: name: "punctuation.definition.assignment.equals-sign.gitignore"
					4: name: "constant.language.other.gitignore", patterns: [include: "#escape"]
			}]
		},{
			# Attribute that doesn't take/expect an argument
			name:  "meta.$1-attribute.gitignore"
			match: "(?:\\G|(?<=,|\\())(-|!)?(attr|exclude|glob|icase|literal|top)(?=,|\\))"
			captures:
				1: patterns: [include: "#magicMnemonic"]
				2: name: "keyword.control.magic-signature.$2.gitignore"
		},{
			# Unrecognised/invalid attribute
			name:  "meta.unknown-attribute.gitignore"
			match: "(?:\\G|(?<=,|\\())(-|!)?((?:[^\\\\=\\s,:\\)]|\\\\.)++)(?=,|\\))"
			captures:
				1: patterns: [include: "#magicMnemonic"]
				2: name: "keyword.control.magic-signature.unknown.gitignore"
		}]

	# File pattern
	pattern:
		name:  "meta.pattern.gitignore"
		begin: "(?=[^#\\s])"
		end:   "$|(?=#)"
		patterns: [
			{include: "#bazaarPrefixes"}
			{include: "#patternInnards"}
		]

	# Stuff matched inside file patterns
	patternInnards:
		patterns: [
			{include: "#escape"}
			{include: "#range"}
			{match: "\\G!",   name: "keyword.operator.logical.not.negation.gitignore"}
			{match: "\\*\\*", name: "keyword.operator.glob.wildcard.globstar.gitignore"}
			{match: "[*?]",   name: "keyword.operator.glob.wildcard.gitignore"}
			{match: "/",      name: "punctuation.directory.separator.meta.gitignore"}
			
			# Literal characters
			name: "entity.other.file.name.gitignore"
			match: "[^\\[\\]\\\\*?#/\\s]+"
		]

	# Character range: [a-z]
	range:
		name:  "meta.character-range.gitignore"
		begin: "\\["
		end:   "\\]|(?=$)"
		beginCaptures: 0: name: "punctuation.definition.square.bracket.begin.gitignore"
		endCaptures:   0: name: "punctuation.definition.square.bracket.end.gitignore"
		contentName: "constant.character.class.gitignore"
		patterns: [
			{include: "#escape"}
			
			# Range separators
			name: "punctuation.delimiter.range.character-set.gitignore"
			match: "-"
		]
