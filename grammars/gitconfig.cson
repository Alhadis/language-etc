name: ".gitconfig"
scopeName: "source.gitconfig"
fileTypes: [
	".git/config"
	".config/git/config"
	"gitconfig"
	"gitmodules"
	"lfsconfig"
]
patterns: [include: "#main"]
firstLineMatch: """(?x)

	# Emacs modeline
	-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		(?i:git-?(?:config|modules))
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-
	
	|
	
	# Vim modeline
	(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
	(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
	(?:filetype|ft|syntax)[ \\t]*=
		(?i:git-?(?:config|modules))
	(?=$|\\s|:)
"""

repository:
	main:
		patterns: [
			{include: "#comments"}
			{include: "#includeSection"}
			{include: "#aliasSection"}
			{include: "#urlSection"}
			{include: "#section"}
		]
	
	# Separate Git/shell aliases
	alias:
		name:  "meta.alias.gitconfig"
		begin: "(?:^|(?<=\\])\\G)\\s*([A-Za-z][-A-Za-z]*)\\s*(=)"
		end:   "(?<!\\\\)$|(?=#|;)"
		beginCaptures:
			1: name: "variable.parameter.assignment.gitconfig"
			2: name: "keyword.operator.assignment.key-value.gitconfig"
		patterns: [include: "#aliasInnards"]
	
	# Embedded shell/Git commands
	aliasInnards:
		patterns: [{
			# Quoted shell-script
			name:  "meta.quoted.shell.command.gitconfig"
			begin: '\\G\\s*(?:(")(!)|(!)("))\\s*+'
			end:   '(?<!\\\\)(?:(")|(?=$))'
			beginCaptures:
				1: name: "punctuation.definition.string.begin.gitconfig"
				2: name: "keyword.operator.shell-script.gitconfig"
				3: name: "keyword.operator.shell-script.gitconfig"
				4: name: "punctuation.definition.string.begin.gitconfig"
			endCaptures:
				1: name: "punctuation.definition.string.end.gitconfig"
			patterns: [include: "source.shell"]
		},{
			# Unquoted shell-script
			name:  "meta.unquoted.shell.command.gitconfig"
			begin: '\\G\\s*(!)'
			end:   "(?<!\\\\)(?=$)"
			beginCaptures:
				1: name: "keyword.operator.shell-script.gitconfig"
			patterns: [
				{include: "#escapedNewline"}
				{include: "source.shell"}
			]
		},{
			# Git subcommands
			name:  "meta.git.subcommands.gitconfig"
			begin: '\\G\\s*([^\\s"#;!]+)'
			end:   "(?<!\\\\)(?=$|#|;)"
			beginCaptures:
				0: name: "string.unquoted.source.gitconfig"
			contentName: "string.unquoted.source.gitconfig"
			patterns: [include: "#escapes"]
		}]
	
	# [alias] - Block which defines a list of aliased commands
	aliasSection:
		name:  "meta.aliases.section.gitconfig"
		begin: "(?i)(?:^|\\G)\\s*(\\\[)\\s*(alias)\\s*(\\])"
		end:   "(?!\\G)(?=^\\s*\\[)"
		beginCaptures:
			0: name: "meta.section.header.gitconfig"
			1: name: "punctuation.definition.bracket.square.begin.gitconfig"
			2: name: "entity.section.name.gitconfig"
			3: name: "punctuation.definition.bracket.square.end.gitconfig"
		patterns: [
			{include: "#alias"}
			{include: "#comments"}
			{include: "#variables"}
		]
	
	
	# Commented lines beginning with `#` or `;`
	comments:
		patterns: [{
			# Hash/pound
			name:  "comment.line.number-sign.gitconfig"
			begin: "#"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.gitconfig"
		},{
			# Semicolon
			name:  "comment.line.semicolon.gitconfig"
			begin: ";"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.gitconfig"
		}]


	# (Sub)section/variable separator
	dot:
		name:  "punctuation.delimiter.separator.meta.dot.period.gitconfig"
		match: "\\."


	# Bare/unquoted escape sequences
	escapes:
		patterns: [{
			# \\ — Backslash
			name:  "constant.character.escape.backslash.gitconfig"
			match: '(\\\\)\\\\'
			captures:
				1: name: "punctuation.definition.escape.backslash.gitconfig"
		},{
			# \" — Double-quote
			name:  "constant.character.escape.quote.gitconfig"
			match: '(\\\\)"'
			captures:
				1: name: "punctuation.definition.escape.backslash.gitconfig"
		},{
			# \n — Newline
			name:  "constant.character.escape.newline.gitconfig"
			match: "(\\\\)n"
			captures:
				1: name: "punctuation.definition.escape.backslash.gitconfig"
		},{
			# \t — Horizontal tab
			name:  "constant.character.escape.tab.gitconfig"
			match: "(\\\\)t"
			captures:
				1: name: "punctuation.definition.escape.backslash.gitconfig"
		},{
			# \b — Backspace
			name:  "constant.character.escape.backspace.gitconfig"
			match: "(\\\\)b"
			captures:
				1: name: "punctuation.definition.escape.backslash.gitconfig"
		},{
			include: "#escapedNewline"
		},{
			# Other escape sequences are invalid
			name:  "invalid.illegal.syntax.escape.gitconfig"
			match: "\\\\."
		}]

	# Line continuation
	escapedNewline:
		name:  "constant.character.escape.newline.gitconfig"
		match: "(\\\\)$\\s*"
		captures:
			1: name: "punctuation.definition.escape.backslash.gitconfig"

	# [include] and [includeIf "…"] blocks
	includeSection:
		name:  "meta.include.section.gitconfig"
		begin: """(?ix)
			(?:^|\\G) \\s*
			(\\\[) #1
			\\s*
			(include(?:If)?) #2
			(?:
				\\s*
				(") #3
				(   #4
					(?: [^\\\\"]
					|   \\\\.
					)*+
				)
				(") #5
			)?+
			\\s* (\\]) #6
		"""
		end: "(?!\\G)(?=^\\s*\\[)"
		beginCaptures:
			0: name: "meta.section.header.gitconfig"
			1: name: "punctuation.definition.bracket.square.begin.gitconfig"
			2: name: "keyword.control.directive.${2:/downcase}.gitconfig"
			3: name: "punctuation.definition.condition.begin.gitconfig"
			4: patterns: [{
				name:  "meta.condition.match-directory.gitconfig"
				begin: "(gitdir)((/)i)?(:)"
				end:   '(?=\\s*(?:$|"))'
				beginCaptures:
					1: name: "entity.name.condition-type.gitconfig"
					2: name: "storage.modifier.ignore-case.gitconfig"
					3: name: "punctuation.separator.modifier.slash.gitconfig"
					4: name: "punctuation.separator.key-value.gitconfig"
				contentName: "string.other.link.gitconfig"
				patterns: [
					{include: "#sectionEscapes"}
					{include: "#includeInnards"}
				]
			},{
				name:  "meta.condition.match-worktree.gitconfig"
				begin: "(onbranch)(:)"
				end:   '(?=\\s*(?:$|"))'
				beginCaptures:
					1: name: "entity.name.condition-type.gitconfig"
					2: name: "punctuation.separator.key-value.gitconfig"
				contentName: "string.other.file.name.gitconfig"
				patterns: [
					{include: "#sectionEscapes"}
					{include: "#includeInnards"}
				]
			},{
				name:  "meta.condition.match-config.gitconfig"
				begin: '(hasconfig)(:)([^":]+)(:)'
				end:   '(?=\\s*(?:$|"))'
				beginCaptures:
					1: name: "entity.name.condition-type.gitconfig"
					2: name: "punctuation.separator.parameter.gitconfig"
					3: name: "variable.parameter.comparison.gitconfig", patterns: [
						{include: "#dot"}
						{include: "#sectionEscapes"}
						{include: "#includeInnards"}
					]
					4: name: "punctuation.separator.key-value.gitconfig"
				contentName: "string.unquoted.argument.gitconfig"
				patterns: [
					{include: "#sectionEscapes"}
					{include: "#includeInnards"}
				]
			}]
			5: name: "punctuation.definition.condition.end.gitconfig"
			6: name: "punctuation.definition.bracket.square.end.gitconfig"
		patterns: [
			{include: "#includePath"}
			{include: "#comments"}
			{include: "#variables"}
		]
	
	# path = …
	includePath:
		name:  "meta.included-file.gitconfig"
		begin: "(?:^|(?<=\\])\\G)\\s*(path)\\s*(=)[ \\t]*"
		end:   "(?=\\s*(?:(?<!\\\\)$|#|;))"
		beginCaptures:
			1: name: "variable.parameter.assignment.gitconfig"
			2: name: "keyword.operator.assignment.key-value.gitconfig"
		patterns: [{
			# Quoted pathspec
			name:  "string.quoted.double.pathspec.gitconfig"
			begin: '\\G\\s*"'
			end:   '"|(?<!\\\\)(?=\\s*$)'
			beginCaptures: 0: name: "punctuation.definition.string.begin.gitconfig"
			endCaptures:   0: name: "punctuation.definition.string.end.gitconfig"
			contentName: "string.other.link.pathspec.gitconfig"
			patterns: [include: "#includeInnards"]
		},{
			# Unquoted pathspec
			match: '([^"\\s;#][^;#]*?)(?<=\\S)(?=\\s*(?:$|;|#))'
			captures: 1:
				name: "string.other.link.pathspec.gitconfig"
				patterns: [include: "#includeInnards"]
		
		}, {include: "#comments"}, {include: "#variables"}]
	
	# Stuff matched inside a condition's pathspec
	includeInnards:
		patterns: [
			{match: "(?:^|\\G)~(?=/)",   name: "keyword.operator.tilde.gitconfig"}
			{match: "(?:^|\\G)\\.(?=/)", name: "keyword.operator.config-path.gitconfig"}
			{match: "\\*\\*",            name: "keyword.operator.glob.wildcard.globstar.gitconfig"}
			{match: "[*?]",              name: "keyword.operator.glob.wildcard.gitconfig"}
			{match: "/",                 name: "punctuation.directory.separator.meta.gitconfig"}
			{include: "#escapes"}
		]

	# [section] block
	section:
		name:  "meta.section.gitconfig"
		begin: """(?x)
			(?:^|\\G) \\s*
			(?:
				(\\[)\\s*(\\]) #1, #2
				|
				(\\\[) #3
				\\s*
				(?:
					([-.A-Za-z0-9]+?) #4
					(?:
						(\\.)           #5
						([-A-Za-z0-9]+) #6
					)?
				)
				(?:
					\\s*
					(") #7
					(   #8
						(?: [^\\\\"]
						|   \\\\.
						)*+
					)
					(") #9
				)?+
				\\s* (\\]) #10
			)
		"""
		end: "(?!\\G)(?=^\\s*\\[)"
		beginCaptures:
			0:  name: "meta.section.header.gitconfig"
			1:  name: "punctuation.definition.bracket.square.begin.gitconfig"
			2:  name: "punctuation.definition.bracket.square.end.gitconfig"
			3:  name: "punctuation.definition.bracket.square.begin.gitconfig"
			4:  name: "entity.section.name.gitconfig"
			5:  patterns: [include: "#dot"]
			6:  name: "entity.subsection.name.deprecated-syntax.gitconfig"
			7:  name: "punctuation.definition.subsection.begin.gitconfig"
			8:  name: "entity.subsection.name.gitconfig", patterns: [include: "#sectionEscapes"]
			9:  name: "punctuation.definition.subsection.end.gitconfig"
			10: name: "punctuation.definition.bracket.square.end.gitconfig"
		patterns: [
			{include: "#comments"}
			{include: "#variables"}
		]

	# Escape sequences matched in subsection names
	sectionEscapes:
		patterns: [{
			# Escaped backslash or double-quote
			name:  "constant.character.escape.backslash.gitconfig"
			match: '(\\\\)[\\\\"]'
			captures:
				1: name: "punctuation.definition.escape.backslash.gitconfig"
		},{
			# Superfluous backslash: \t -> t
			name:  "constant.character.escape.unknown.gitconfig"
			match: '\\\\(?=[^\\\\"])'
			captures:
				0: name: "punctuation.definition.escape.backslash.ignored.gitconfig"
		}]

	# Variable lines within a section block
	variables:
		patterns: [{
			# Signing key
			name:  "meta.variable-field.gitconfig"
			begin: "(?i)\\b(signingkey)(?=\\s|$)"
			end:   "(?=\\s*(?:$|#|;))"
			captures:
				1: name: "variable.parameter.assignment.gitconfig"
				2: name: "keyword.operator.assignment.key-value.gitconfig"
			patterns: [{
				# Hexadecimal sigining-key
				name: "constant.other.signing-key.hex.gitconfig"
				match: "\\w+"
			}, include: "#variableInnards"]
		},{
			# URL-type fields
			name:  "meta.variable-field.gitconfig"
			begin: "(?i)\\b(email|url)\\s*(=)"
			end:   "(?=\\s*(?:$|#|;))"
			beginCaptures:
				1: name: "variable.parameter.assignment.gitconfig"
				2: name: "keyword.operator.assignment.key-value.gitconfig"
			patterns: [include: "#urlInnards"]
		},{
			# Everything else
			name:  "meta.variable-field.gitconfig"
			begin: "[0-9A-Za-z][-0-9A-Za-z]*"
			beginCaptures:
				0: name: "variable.parameter.assignment.gitconfig"
			end: "(?=\\s*(?:$|#|;))"
			patterns: [include: "#variableInnards"]
		}]

	# URL shorthand
	urlSection:
		name:  "meta.url.section.gitconfig"
		begin: """(?ix)
			(?:^|\\G) \\s*
			(\\\[) #1
			\\s*
			(url|https?|core\.(?:git)?proxy) #2
			(?:
				\\s*
				(") #3
				(   #4
					(?: [^\\\\"]
					|   \\\\.
					)*+
				)
				(") #5
			)?+
			\\s* (\\]) #6
		"""
		end: "(?!\\G)(?=^\\s*\\[)"
		beginCaptures:
			0: name: "meta.section.header.gitconfig"
			1: name: "punctuation.definition.bracket.square.begin.gitconfig"
			2: name: "entity.section.name.gitconfig"
			3: name: "punctuation.definition.subsection.begin.gitconfig"
			4: name: "string.other.link.gitconfig", patterns: [include: "#sectionEscapes"]
			5: name: "punctuation.definition.subsection.end.gitconfig"
			6: name: "punctuation.definition.bracket.square.end.gitconfig"
		patterns: [
			{include: "#comments"}
			{include: "#variables"}
		]

	# Stuff matched inside a URL-type value
	urlInnards:
		patterns: [{
			name:  "string.other.link.gitconfig"
			begin: '"'
			end:   '"|(?=\\s*$)'
			beginCaptures: 0: name: "string.quoted.string.begin.gitconfig"
			endCaptures:   0: name: "string.quoted.string.end.gitconfig"
			patterns: [include: "#escapes"]
		},{
			name:  "string.other.link.gitconfig"
			match: '(?:[^\\s";#\\\\]|\\\\.)+'
			captures:
				0: patterns: [include: "#escapes"]
		}]

	# Stuff matched after a variable name
	variableInnards:
		patterns: [{
			match: "\\G\\s*(=)"
			captures:
				1: name: "keyword.operator.assignment.key-value.gitconfig"
		},{
			# Boolean-ish keyword
			name:  "constant.logical.boolean.$1.gitconfig"
			match: "(?i)\\b(true|false|on|off|1|0|yes|no)\\b"
		},{
			# Integers
			name:  "constant.numeric.decimal.integer.int.gitconfig"
			match: "[-+]?[0-9]+(?=$|[\\s#;])"
		},{
			# Float
			name:  "constant.numeric.decimal.float.gitconfig"
			match: "[-+]?(?:[0-9]+\\.[0-9]*|\\.[0-9]+)(?=$|\\s#;)"
		},{
			# Unclosed string
			name:  "string.quoted.double.argument.gitconfig"
			match: '(")((?:[^\\\\"]|\\\\.)*?)(?<!\\\\)(?=\\s*$)'
			captures:
				0: name: "invalid.illegal.syntax.unclosed-string.gitconfig"
				1: name: "punctuation.definition.string.begin.gitconfig"
				2: patterns: [include: "#escapes"]
		},{
			# String
			name:  "string.quoted.double.argument.gitconfig"
			begin: '"'
			end:   '"|(?<!\\\\)(?=\\s*$)'
			beginCaptures: 0: name: "punctuation.definition.string.begin.gitconfig"
			endCaptures:   0: name: "punctuation.definition.string.end.gitconfig"
			patterns: [include: "#escapes"]
		},{
			# Anything else
			name: "string.unquoted.argument.gitconfig"
			match: '(?:[^\\\\\\s";#]|\\\\.)+'
			captures:
				0: patterns: [include: "#escapes"]
		
		}, include: "#escapedNewline"]
