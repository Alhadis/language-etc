# Calendar tables used by calendar(1) utility, stored in “/usr/share/calendar”.
name: "Calendar"
scopeName: "source.c.calendar"
fileTypes: [
	"calendar"
	"calendar.all"

	# Birthdays of celebrities, musicians, and other randos
	"calendar.birthday"
	"calendar.freebsd"
	"calendar.music"
	"calendar.openbsd"
	
	# History, science, and other nerd shit
	"calendar.holiday"
	"calendar.history"
	"calendar.computer"
	"calendar.space"
	
	# Religious calendars
	"calendar.christian"
	"calendar.judaic"
	"calendar.pagan"

	# Made-up calendars for things that don't exist
	"calendar.discord"
	"calendar.dutch"
	"calendar.fictional"
	"calendar.lotr"

	# Regional calendars
	"calendar.australia"
	"calendar.canada"
	"calendar.croatian"
	"calendar.french"
	"calendar.german"
	"calendar.hungarian"
	"calendar.newzealand"
	"calendar.nz"
	"calendar.russian"
	"calendar.southafrica"
	"calendar.uk"
	"calendar.ukrainian"
	"calendar.ushistory"
	"calendar.usholiday"
	"calendar.world"
]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "source.c#comments"}
			{include: "#preprocessor-rule"}
			{include: "#setting"}
			{include: "#date"}
		]

	# C/C++ #preprocessor directives that aren't exposed as named-patterns and thus
	# can't be imported individually using `source.c#name`. Hence the song-and-dance…
	"preprocessor-rule":
		applyEndPatternLast: yes
		begin: "^(?=\\s*#\\s*(?:define|elif|else|endif|error|if(?:n?def)?|include|warning))"
		end:   "(?!\\G)"
		patterns: [include: "source.c"]

	# Locale-related overrides like “LANG=…” and 
	setting:
		name:  "meta.assignment.setting.calendar"
		begin: "^([A-Za-z]\\w*)(=)"
		end:   "(?=\\s*(?:$|/\\*))"
		beginCaptures:
			1: name: "variable.assignment.${1:/downcase}.calendar"
			2: patterns: [include: "etc#eql"]
		patterns: [{
			# Tokenise POSIX locale(1) format
			match: """(?x) (?<=LANG=) \\G
				([a-zA-Z]{2,3})   # Language subtag (ISO 639-1)
				((_)   \\w{2,})?  # Territory/region subtag
				((\\.) [-\\w]+)?  # Codeset (Character encoding)
				((@)   \\w+)?     # Nebulously-defined “modifier”
			"""
			captures:
				1: name: "entity.name.language.locale.calendar"
				2: name: "entity.name.territory.locale.calendar"
				3: name: "punctuation.separator.territory.locale.calendar"
				4: name: "entity.name.codeset.locale.calendar"
				5: name: "punctuation.separator.codeset.locale.calendar"
				6: name: "storage.modifier.locale.calendar"
				7: name: "punctuation.separator.modifier.calendar"
		},{
			# Anything else
			name:  "constant.language.locale.calendar"
			begin: "\\G"
			end:   "(?=\\s|/\\*)"
		}]

	# Date entries
	date:
		name:  "meta.date.calendar"
		begin: "^(?=\\S)(?![A-Za-z]\\w+=|/\\*)"
		end:   "(?!\\G)(?=^)(?!\\t)"
		patterns: [{
			# Date/period description itself
			match: "\\G([\\S ]+)"
			captures:
				0: patterns: [include: "#dateSpec"]
		},{
			# Description
			begin: "(?!\\G)(\\t)(?=\\s*(?:\\S)(?!/\\*))"
			end:   "(?=^(?!\\t))"
			beginCaptures:
				1: name: "punctuation.whitespace.separator.calendar"
			contentName: "markup.quote.description.calendar"
			patterns: [
				{match: "^[ \\t]*$", name: "comment.line.empty.ignored.calendar"}
				{match: "^(\\t)",    name: "punctuation.whitespace.continuation.calendar"}
				{include: "source.c#comments"}
			]
		}]

	# Stuff matched in the initial column of an event declaration
	dateSpec:
		patterns: [{
			# Solitary asterisk: match every month
			name:  "keyword.operator.wildcard.match-any-month.calendar"
			match: "^\\*$"
		},{
			# Trailing asterisk: mark date as variable from year-to-year
			name:  "keyword.operator.variable.calendar"
			match: "(?<=\\S)\\s*\\*"
		},{
			# Special event names; hardcoded into calendar(1)
			name: "constant.language.date.special-event.${1:/downcase}.calendar"
			match: "(?i)(Easter|Ostern|Paskha|Pesach)"
		},{
			# English month names
			match: """(?xi)
				( Jan(?:uary)?
				| Feb(?:ruary)?
				| Mar(?:ch)?
				| Apr(?:il)?
				| May
				| June?
				| July?
				| Aug(?:ust)?
				| Sep(?:tember)?
				| Oct(?:ober)?
				| Nov(?:ember)?
				| Dec(?:ember)?
				) (\\.)? \\s* (0*(?:(?!0)[12]?[0-9]|3[0-1])\\b)?
			"""
			captures:
				1: name: "constant.language.date.month.english.calendar"
				2: name: "punctuation.definition.abbreviation.month.calendar"
				3: name: "constant.numeric.integer.date.day.calendar"
		},{
			# English days of the week
			match: """(?xi)
				( Mon(?:day)?
				| Tue(?:sday)?
				| Wed(?:nesday)?
				| Thu(?:rsday)?
				| Fri(?:day)?
				| Sat(?:urday)?
				| Sun(?:day)?
				) (\\.)?
			"""
			captures:
				1: name: "constant.language.date.weekday.english.calendar"
				2: name: "punctuation.definition.abbreviation.month.calendar"
		},{
			# Purely-numeric specification
			match: """(?x) ^ \\s* (?:
				# Unambiguous DD/MM
				((?=1[3-9]|2[0-9]|3[01])\\d{2})
				(?:(?:\\s*(/)\\s*|\\s+)(0?[1-9]|1[0-2])\\b)?
				|
				# MM/DD (default)
				(0?[1-9]|1[0-2])\\b
				(?:(?:\\s*(/)\\s*|\\s+)((?=[0-2][0-9]|3[01])\\d{2}))?
			)"""
			captures:
				1: name: "constant.numeric.integer.date.day.dd-mm.calendar"
				3: name: "constant.numeric.integer.date.month.dd-mm.calendar"
				4: name: "constant.numeric.integer.date.month.mm-dd.calendar"
				6: name: "constant.numeric.integer.date.day.mm-dd.calendar"
				2: patterns: [include: "#slash"]
				5: patterns: [include: "#slash"]
		},{
			# Offset specifier, English
			name: "keyword.operator.offset-specifier.english.calendar"
			match: "(?i)(First|Second|Third|Fourth|Fifth|Sixth|Seventh|Eighth|Ninth|Last)"
		},{
			# Offset specifier, Numeric
			name: "keyword.operator.offset-specifier.numeric.calendar"
			match: "(?!-5)(-|\\+)[0-5]"
			captures:
				1: name: "punctuation.definition.offset.calendar"
		},{
			# Blindly treat unrecognised text as localised month names
			name: "constant.language.date.localised-text.calendar"
			match: "(?!\\d)(?:\\w)+(?=(?:First|Second|Third|Fourth|Fifth|Sixth|Seventh|Eighth|Ninth|Last)?$)"
		},{
			# Similarly, assume any unmatched numbers are days of the month
			name: "constant.numeric.integer.date.day.assumed.calendar"
			match: "\\b(?:0?[1-9]|[12][0-9]|3[01])\\b"
		}, include: "#slash"]

	# Day/month separator
	slash:
		name:  "punctuation.separator.date.slash.calendar"
		match: "/"
