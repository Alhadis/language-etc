name: "Hosts file"
scopeName: "source.hosts"
fileTypes: [
	"hosts"
	"hosts.txt"
	"HSTATH.40"
	"HSTMIT.1115"
	"SYSHST; HSTLCL 560"
]
firstLineMatch: "^;\\s+(?:DoD Internet|MIT/Stanford) Host Table(?:$|\\s)"
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#legacy"}
			{include: "#modern"}
		]

	# Modern hosts(5) file format
	modern:
		patterns: [
			{include: "etc#comment"}
			{include: "etc#ip"}
			{include: "#loopback"}
			{include: "#host"}
		]
	
	# Compressed form of IPv6's loopback address
	loopback:
		name: "constant.numeric.other.ip-address"
		match: "(?<=\\s|^)(::)1(?=$|\\s)"
		captures:
			1: name: "punctuation.definition.ip-address.loopback"

	# Human-friendly hostname
	host:
		name: "entity.name.host.domain.hosts"
		match: "(?<=\\s|^|,)[^:\\s#,][^\\s#,]*"
		captures:
			0: patterns: [include: "etc#dot"]


	# The original (pre-DNS) “HOSTS.TXT” database
	legacy:
		patterns: [
			{include: "etc#commentSemi"}
			{include: "#legacy-dod"}
			{include: "#legacy-nic"}
		]

	# Later database format, maintained by ARPANET (RFC 952)
	"legacy-dod":
		name:  "meta.definition.${1:/downcase}.hosts.legacy"
		match: """(?x) ^ \\s*
			(NET|GATEWAY|HOST|DOMAIN)              \\s*   # Record type
			(:)    \\s* ([^\\s:][^:\\r\\n]*)       \\s*   # IP address list
			(?:(:) \\s* ([^\\s:][^:\\r\\n]*)       \\s*)? # Name
			(?:(:) \\s* ([^\\s:][^:\\r\\n]*|(?=:)) \\s*)? # CPU type
			(?:(:) \\s* ([^\\s:][^:\\r\\n]*|(?=:)) \\s*)? # Operating systems
			(?:(:) \\s* ([^\\s:][^:\\r\\n]*|(?=:)) \\s*)? # Protocols
			(:)(?=\\s*(?:$|;))
		"""
		captures:
			1: name: "storage.type.class.hosts"
			2: patterns: [include: "etc#colon"]
			3: name: "meta.list.addresses.hosts", patterns: [
				{include: "etc#ipv4"}
				{include: "etc#comma"}
				{include: "#legacy-host"}
			]
			4: patterns: [include: "etc#colon"]
			5: patterns: [include: "etc#comma", {include: "#host"}]
			6: patterns: [include: "etc#colon"]
			7: name: "meta.list.cpus.hosts", patterns: [{
				name: "constant.language.cpu-type.hosts"
				match: "[^\\s,:]+"
			}, include: "etc#comma"]
			8: patterns: [include: "etc#colon"]
			9: name: "meta.list.systems.hosts", patterns: [{
				name: "constant.language.operating-system.hosts"
				match: "[^\\s,:]+"
			}, include: "etc#comma"]
			10: patterns: [include: "etc#colon"]
			11: name: "meta.list.protocols.hosts", patterns: [{
				name: "constant.other.protocol.hosts"
				match: "[^\\s,:]+"
				captures: 0: patterns: [include: "#legacy-sym"]
			}, include: "etc#comma"]
			12: patterns: [include: "etc#colon"]

	# Earlier variant of “HOSTS.TXT” used at MIT/Stanford (RFC 608)
	"legacy-nic":
		patterns: [{
			# NET <name>,<network-id>
			name: "meta.definition.network.hosts.legacy"
			match: "^\\s*(NET)\\s+([^\\s;,:]+)\\s*(,)\\s*(\\d+)(?=\\s*(?:$|;))"
			captures:
				1: name: "storage.type.class.hosts"
				2: name: "entity.name.network.hosts"
				3: patterns: [include: "etc#comma"]
				4: patterns: [include: "etc#intNoExp"]
		},{
			# HOST <name>,<host-id>,<status>,<system>,<machine>,[<nicknames>]
			name: "meta.definition.host.hosts.legacy"
			match: """(?x) ^
				\\s* (HOST) \\s+ ([^\\s,:]+) \\s* (,) \\s* # Name
				(?: ((?:[A-Z]+ \\s+)? \\d[^\\s,:\\[\\]]*)  # Host ID (single)
				|   ((\\[) ([^\\[\\]]+) (\\]))             # Host IDs (list)
				)
				(?:(,) ([A-Z]*))?   # Status
				(?:(,) ([^,\\s]*))? # System
				(?:(,) ([^,\\s]*))? # Machine
				(?:(,) ((\\[)([^\\[\\]]*)(\\])))? # Nicknames
				(?=\\s*(?:$|;))
			"""
			captures:
				1: name: "storage.type.class.hosts"
				2: name: "entity.name.host.hosts"
				3: patterns: [include: "etc#comma"]
				4: patterns: [include: "#legacy-host"]
				5: name: "meta.array.list.hosts"
				6: patterns: [include: "#legacy-sym"]
				7: patterns: [include: "#legacy-host"]
				8: patterns: [include: "#legacy-sym"]
				9: patterns: [include: "etc#comma"]
				10: name: "constant.language.status.hosts"
				11: patterns: [include: "etc#comma"]
				12: name: "constant.language.operating-system.hosts"
				13: patterns: [include: "etc#comma"]
				14: name: "constant.language.machine.hosts"
				15: patterns: [include: "etc#comma"]
				16: name: "meta.array.list.nicknames.hosts"
				17: patterns: [include: "#legacy-sym"]
				18: patterns: [include: "etc#comma", {include: "#host"}]
				19: patterns: [include: "#legacy-sym"]
		}]

	# Host number, possibly prefixed by network name/type
	"legacy-host":
		patterns: [{
			# No network specified; defaults to ARPA/RCC format
			name:  "meta.host-number.unprefixed.arpa.hosts.legacy"
			begin: "\\s*(?=\\d)"
			end:   "(?!\\G)"
			patterns: [include: "#legacy-host-innards"]
		},{
			name:  "meta.host-number.prefixed.${1:/downcase}.hosts.legacy"
			begin: "\\b(ARPA|RCC|CHAOS|LCS|SU)(?=$|\\s|;)"
			end:   "(?!\\G)"
			beginCaptures:
				1: name: "entity.name.tag.network.hosts.legacy"
			patterns: [include: "#legacy-host-innards"]
		}, include: "#legacy-host-innards"]
	
	"legacy-host-innards":
		patterns: [{
			# CHAOS <OCTAL>
			match: "(?<=CHAOS)\\G\\s+([0-7]+)\\b"
			captures:
				1: name: "constant.numeric.integer.int.octal.oct.hosts.legacy"
		},{
			# Octal pair representing subnet and host numbers
			begin: """(?x) \\G (?=
				(?: (?<=LCS) \\s+ [0-7]+ (?:/[0-7]+)?   # LCS <S>/<H>
				|   (?<=SU)  \\s+ [0-7]+ (?:\\#[0-7]+)? # SU <S>#<H>
				) \\b(?!/|\\#)
			) \\s*"""
			end: "(?!\\G)"
			applyEndPatternLast: yes
			patterns: [
				{match: "\\G\\d+",     name: "constant.numeric.integer.int.octal.oct.subnet-number.hosts.legacy"}
				{match: "(?!\\G)\\d+", name: "constant.numeric.integer.int.octal.oct.host-number.hosts.legacy"}
				{include: "#legacy-sym"}
			]
		},{
			# ARPA/RCCnet-formatted host number
			match: "(?:^|\\G|(?<!\\s),)(?:(?<=ARPA|RCC)\\s+|\\s*)\\b(\\d+)(?:(/)(\\d+))?\\b(?!/|#)"
			captures:
				1: name: "constant.numeric.integer.int.decimal.dec.host-number.hosts.legacy"
				3: name: "constant.numeric.integer.int.decimal.dec.imp-number.hosts.legacy"
				2: patterns: [include: "#legacy-sym"]
		}, include: "etc#comma"]

	# Punctuation characters matched inside legacy hosts format
	"legacy-sym":
		patterns: [{
			# Tuple separator
			name: "meta.separator.hosts.legacy"
			match: "(/)|(#)"
			captures:
				1: name: "punctuation.separator.slash.hosts.legacy"
				2: name: "punctuation.separator.number-sign.hosts.legacy"
		},{
			# Opening square bracket
			name: "punctuation.section.square.bracket.begin.hosts.legacy"
			match: "\\["
			captures:
				0: name: "brackethighlighter.square"
		},{
			# Closing square bracket
			name: "punctuation.section.square.bracket.end.hosts.legacy"
			match: "\\]"
			captures:
				0: name: "brackethighlighter.square"
		}]
