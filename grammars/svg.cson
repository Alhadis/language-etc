name: "SVG"
scopeName: "text.xml.svg"
maxTokensPerLine: 2048
fileTypes: ["svg"]
firstLineMatch: """(?xi)

	# Comment inserted by Illustrator when saving SVG files
	<!--\\s+Generator:\\s+Adobe\\s+Illustrator.*?SVG\\s+Export\\s+Plug-In.*?-->
	|
	
	# Opening <svg> tag
	\\A(<?xml[^>]*\\?>(?:$|[\\r\\n]*))?\\s*<svg(?=\\s|$)
	|
	
	# Emacs modeline
	-\\*-(?:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		svg
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-
	
	|
		
	# Vim modeline
	(?-i:(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
	(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
	(?:filetype|ft|syntax)[ \\t]*=)
		svg
	(?=$|\\s|:)
"""
injections:
	"R:meta.attribute.d.xml.svg string":
		patterns: [include: "#commands"]

patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#cdata"}
			{include: "#doctype"}
			{include: "text.xml#EntityDecl"}
			{include: "text.xml#parameterEntity"}
			{include: "#entity"}
			{include: "#preprocessor"}
			{include: "#scriptTag"}
			{include: "#styleTag"}
			{include: "#tag"}
			{include: "#unmatchedTag"}
		]


	# <![CDATA[ … ]]>
	cdata:
		name:  "string.unquoted.cdata.xml.svg"
		begin: "<!\\[CDATA\\["
		end:   "\\]\\]>"
		beginCaptures: 0: name: "punctuation.definition.string.begin.xml.svg"
		endCaptures:   0: name: "punctuation.definition.string.end.xml.svg"


	# Path drawing commands
	commands:
		patterns: [{
			name: "keyword.operator.drawing-command.xml.svg"
			match: "(?i)[MLHVCSQTAZ]"
		},{
			name: "constant.numeric.number.xml.svg"
			match: "-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)"
		},{
			name: "punctuation.separator.coordinates.comma.xml.svg"
			match: ","
		}]


	# <!-- HTML/SGML-style comments -->
	comment:
		name:  "comment.block.xml.svg"
		begin: "<!--"
		end:   "-->"
		beginCaptures: 0: name: "punctuation.definition.comment.begin.xml.svg"
		endCaptures:   0: name: "punctuation.definition.comment.end.xml.svg"
		patterns: [
			match: "--(?!>)"
			name: "invalid.illegal.bad-comment.xml.svg"
		]


	# <!DOCTYPE svg>
	doctype:
		name:  "meta.tag.sgml.doctype.xml.svg"
		begin: "(<!)(DOCTYPE)\\s+([:a-zA-Z_][-:\\w.]*)"
		end:   "\\s*(>)"
		beginCaptures:
			1: name: "punctuation.definition.tag.begin.xml.svg"
			2: name: "keyword.other.doctype.xml.svg"
			3: name: "variable.language.documentroot.xml.svg"
		endCaptures:
			1: name: "punctuation.definition.tag.end.xml.svg"
		patterns: [include: "text.xml#internalSubset"]


	# Character entities, imported from XML grammar
	entity:
		patterns: [
			{include: "text.xml#entity"}
			{include: "text.xml#bare-ampersand"}
		]


	# Generic XML attribute
	attr:
		name:  "meta.attribute.${0:/downcase}.xml.svg"
		begin: "[A-Za-z_:][-\\w.:]*"
		end:   "(?=\\s*(?:/?>|[^\\s=]))|(?<=[\"'])"
		beginCaptures:
			0: patterns: [include: "#attrName"]
		patterns: [
			{include: "#attrValueCSS"}
			{include: "#attrValuePlain"}
		]
	
	
	# Embedded CSS highlighting for `style="…"` attributes
	attrValueCSS:
		begin: "(?i)(?<=style)\\G\\s*(=)"
		end:   "(?=\\s*(?:[%?/]?>))|(?<=[\"'])([^\\s>]*)|(?:\\G|^)\\s*([^\\s\"'>]+)"
		beginCaptures:
			1: name: "punctuation.separator.key-value.xml.svg"
		endCaptures:
			1: name: "invalid.illegal.syntax.xml.svg"
			2: name: "string.unquoted.xml.svg", patterns: [include: "source.css#rule-list-innards"]
		patterns: [{
			# Keep leading whitespace out of tokenised strings (below)
			match: "(?:\\G|^)\\s+(?!/?>)"
		},{
			# "Double-quoted" attribute value
			name:  "string.quoted.double.xml.svg"
			begin: '"'
			end:   '"'
			beginCaptures: 0: name: "punctuation.definition.string.begin.xml.svg"
			endCaptures:   0: name: "punctuation.definition.string.end.xml.svg"
			patterns: [{
				name: "source.css.style.xml.svg"
				match: '[^"]+'
				captures: 0: patterns: [
					{include: "#entity"}
					{include: "source.css#rule-list-innards"}
				]
			}]
		},{
			# 'Single-quoted' attribute value
			name:  "string.quoted.single.xml.svg"
			begin: "'"
			end:   "'"
			beginCaptures: 0: name: "punctuation.definition.string.begin.xml.svg"
			endCaptures:   0: name: "punctuation.definition.string.end.xml.svg"
			patterns: [{
				name: "source.css.style.xml.svg"
				match: "[^']+"
				captures: 0: patterns: [
					{include: "#entity"}
					{include: "source.css#rule-list-innards"}
				]
			}]
		}]


	# Usual string highlighting
	attrValuePlain:
		begin: "\\s*(=)"
		end:   "(?=\\s*(?:[%?/]?>))|(?<=[\"'])([^\\s>]*)|(?:\\G|^)\\s*([^\\s\"'>]+)"
		beginCaptures:
			1: name: "punctuation.separator.key-value.xml.svg"
		endCaptures:
			1: name: "invalid.illegal.syntax.xml.svg"
			2: name: "string.unquoted.xml.svg"
		patterns: [{
			# Keep leading whitespace out of tokenised strings (below)
			match: "(?:\\G|^)\\s+(?!/?>)"
		},{
			# "Double-quoted" attribute value
			name:  "string.quoted.double.xml.svg"
			begin: '"'
			end:   '"'
			beginCaptures: 0: name: "punctuation.definition.string.begin.xml.svg"
			endCaptures:   0: name: "punctuation.definition.string.end.xml.svg"
			patterns: [include: "#entity"]
		},{
			# 'Single-quoted' attribute value
			name:  "string.quoted.single.xml.svg"
			begin: "'"
			end:   "'"
			beginCaptures: 0: name: "punctuation.definition.string.begin.xml.svg"
			endCaptures:   0: name: "punctuation.definition.string.end.xml.svg"
			patterns: [include: "#entity"]
		}]

	attrName:
		patterns: [{
			# Namespace
			match: "(?:^|\\G)([-\\w.]+)(:)(?=[-\\w.:])"
			captures:
				1: name: "entity.other.attribute-name.namespace.xml.svg"
				2: name: "punctuation.separator.namespace.xml.svg"
		},{
			# Local-name
			name: "entity.other.attribute-name.localname.xml.svg"
			match: "[A-Za-z_:][-\\w.:]*"
		}]


	# `<?xml …?>` and friends
	preprocessor:
		name:  "meta.tag.preprocessor.xml.svg"
		begin: "(<\\?)\\s*"
		end:   "\\?>"
		beginCaptures: 1: name: "punctuation.definition.tag.begin.xml.svg"
		endCaptures:   0: name: "punctuation.definition.tag.end.xml.svg"
		patterns: [{
			begin: "\\G"
			end:   "([-\\w]+)|(?=\\s*\\?>)"
			endCaptures:
				1: name: "entity.name.tag.xml.svg"
		}, include: "#attr"]


	# <script> tags
	scriptTag:
		patterns: [
			{include: "#scriptTagPlain"}
			{include: "#scriptTagJS"}
		]


	# JavaScript
	scriptTagJS:
		name:  "meta.tag.script.xml.svg"
		begin: "(?i)(<)(script)(?=$|\\s|/?>)"
		end:   "(?i)(</)(script)\\s*(>)|(/>)"
		beginCaptures:
			1: name: "punctuation.definition.tag.opening.begin.xml.svg"
			2: patterns: [include: "#tagName"]
		endCaptures:
			1: name: "punctuation.definition.tag.closing.begin.xml.svg"
			2: patterns: [include: "#tagName"]
			3: name: "punctuation.definition.tag.closing.end.xml.svg"
			4: name: "punctuation.definition.tag.self-closing.end.xml.svg"
		patterns: [include: "#tagAttr", {
			begin: "(?<=>)"
			end:   "(?i)(?=\\s*</script\\s*>)"
			contentName: "source.js.embedded.xml.svg"
			patterns: [
				{include: "source.js"}
				{include: "#entity"}
			]
		}]


	# Anything that's not JavaScript, as identified by its type="…" attribute
	scriptTagPlain:
		name:  "meta.tag.script.xml.svg"
		begin: """(?x)
			(<)((?i)script)
			(
				\\s+[^>]*?
				(?<=\\s)(?i:type)\\s*=\\s*
				(["'])?
				(?! module
				|   application/(?:x-)?(?:ecma|java)script
				|   text/
					(?: javascript(?:1\.[0-5])?
					|   (?:j|ecma|live)script
					|   x-(?:ecma|java)script
					)
				)
				(?: (?<=")(?:[^">]+)"
				|   (?<=')(?:[^'>]+)'
				|   [^\\s"'>]+
				)
				(?=\\s|/?>)
			)
		"""
		end: "(?i)(</)(script)\\s*(>)|(/>)"
		beginCaptures:
			1: name: "punctuation.definition.tag.opening.begin.xml.svg"
			2: patterns: [include: "#tagName"]
			3: patterns: [include: "#attr"]
		endCaptures:
			1: name: "punctuation.definition.tag.closing.begin.xml.svg"
			2: patterns: [include: "#tagName"]
			3: name: "punctuation.definition.tag.closing.end.xml.svg"
			4: name: "punctuation.definition.tag.self-closing.end.xml.svg"
		patterns: [
			{include: "#tagAttr"}
			{include: "#main"}
		]


	# Embedded stylesheet
	styleTag:
		name:  "meta.tag.style.xml.svg"
		begin: "(?i)(<)(style)(?=$|\\s|/?>)"
		end:   "(?i)(</)(style)\\s*(>)|(/>)"
		beginCaptures:
			1: name: "punctuation.definition.tag.opening.begin.xml.svg"
			2: patterns: [include: "#tagName"]
		endCaptures:
			1: name: "punctuation.definition.tag.closing.begin.xml.svg"
			2: patterns: [include: "#tagName"]
			3: name: "punctuation.definition.tag.closing.end.xml.svg"
			4: name: "punctuation.definition.tag.self-closing.end.xml.svg"
		patterns: [include: "#tagAttr", {
			begin: "(?<=>)"
			end:   "(?i)(?=\\s*</style\\s*>)"
			contentName: "source.css.embedded.xml.svg"
			patterns: [
				{include: "source.css"}
				{include: "#entity"}
			]
		}]


	# Generic XML tag
	tag:
		name:  "meta.tag.${2:/downcase}.xml.svg"
		begin: "(?i)(<)([A-Za-z_:][-\\w.:]*)(?=$|\\s|/?>)"
		end:   "(?i)(</)(\\2)\\s*(>)|(/>)"
		beginCaptures:
			1: name: "punctuation.definition.tag.opening.begin.xml.svg"
			2: patterns: [include: "#tagName"]
		endCaptures:
			1: name: "punctuation.definition.tag.closing.begin.xml.svg"
			2: patterns: [include: "#tagName"]
			3: name: "punctuation.definition.tag.closing.end.xml.svg"
			4: name: "punctuation.definition.tag.self-closing.end.xml.svg"
		patterns: [
			{include: "#tagAttr"}
			{include: "#main"}
		]
	
	tagAttr:
		begin: "\\G(?!\\s*/>)"
		end: ">|(?=\\s*/>)"
		endCaptures:
			0: name: "punctuation.definition.tag.opening.end.xml.svg"
		patterns: [include: "#attr"]
	
	tagName:
		patterns: [{
			# Namespace
			match: "(?:^|\\G)([A-Za-z_][-\\w.]*)(:)(?=[-\\w.:])"
			captures:
				1: name: "entity.name.tag.namespace.xml.svg"
				2: name: "punctuation.separator.namespace.xml.svg"
		},{
			# Local-name
			name: "entity.name.tag.localname.xml.svg"
			match: "[A-Za-z_:][-\\w.:]*"
		}]


	# Closing tag found where one wasn't expected
	unmatchedTag:
		match: "(</)([A-Za-z_:][-\\w.:]*)\\s*(>)"
		name: "invalid.illegal.unmatched-tag.xml.svg"
