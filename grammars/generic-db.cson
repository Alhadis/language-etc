# Highlighting for generic plain-text database files
name: "Generic Database"
scopeName: "source.generic-db"
fileTypes: [
	"birthtoken"
	"cross_rubies"
	"flowers"
	"locale.alias"
	"shells"
	"tab"
	"tsv"

	# MIME-type databases (TODO: Move to dedicated grammar)
	"mime.types"
	"mime.types-nonunix"
	"mime.types-unix"
]
firstLineMatch: "^#--(?:(?:Mosaic|Netscape) Communications Corporation|MCOM) MIME Information"
patterns: [{
	# Netscape's “mime.types” database format
	name:  "meta.mime-types.netscape-format.generic-db"
	begin: "\\A(#)((--)(?:(?:Mosaic|Netscape) Communications Corporation|MCOM) MIME Information)$"
	end:   "(?=A)B"
	beginCaptures:
		1: name: "punctuation.definition.comment.directive.generic-db"
		2: name: "storage.type.class.directive.generic-db"
		3: name: "punctuation.definition.block.tag.generic-db"
	patterns: [
		{include: "etc#comment"}
		{include: "#netscape-mime-type"}
	]
}, include: "#main"]

repository:
	main:
		patterns: [
			{include: "etc#comment"}
			{include: "#record"}
		]

	record:
		name: "meta.record.generic-db"
		begin: "^(?=\\s*[^#:\\s])"
		end: "$"
		patterns: [
			{include: "etc#mime"}
			{include: "etc#colon"}
			{include: "etc#tab"}
			{include: "#field"}
		]
	
	field:
		name: "constant.other.field.generic-db"
		match: "(?:[^#:\\s]|(?<=\\t|:)#)[^:\\r\\n\\t]*"


	# Netscape-flavoured MIME-type definition
	"netscape-mime-type":
		name:  "meta.definition.mime-type.netscape-format.generic-db"
		begin: "^(?=\\s*[^#\\s])"
		end:   "$"
		applyEndPatternLast: yes
		patterns: [{
			# Line continuation
			name:  "keyword.operator.line-continuation.generic-db"
			begin: "\\\\$(?:\\r?\\n)?"
			end:   "^"
			beginCaptures:
				0: name: "punctuation.definition.escape.generic-db"
		},{
			# Comma-delimited list of file-extensions: “exts=js,mjs,cjs,esm”
			name:  "meta.assignment.extensions-field.generic-db"
			begin: "(?:^|\\G|(?<=\\s))(exts)(=)"
			end:   "(?!\\G)"
			beginCaptures:
				1: name: "variable.assignment.generic-db"
				2: patterns: [include: "etc#eql"]
			contentName: "meta.extensions-list.generic-db"
			patterns: [{
				# Quoted list
				begin: '\\G"'
				end:   '"'
				beginCaptures: 0: name: "punctuation.definition.string.begin.generic-db"
				endCaptures:   0: name: "punctuation.definition.string.end.generic-db"
				patterns: [{
					name:  "string.quoted.double.file-extension.generic-db"
					match: '[^"\\s,]+'
				}, include: "etc#comma"]
			},{
				# Unquoted list
				match: '\\G(?!")(\\S+)'
				captures: 1: patterns: [{
					name: "string.unquoted.file-extension.generic-db"
					match: "[^,]+"
				}, include: "etc#comma"]
			}]
		},{
			# Content-Encoding name: “enc=x-gzip” (cf. RFC 9110 § 18.6)
			name:  "meta.assignment.content-encoding.generic-db"
			begin: "(?:^|\\G|(?<=\\s))(enc)(=)"
			end:   "(?!\\G)"
			beginCaptures:
				1: name: "variable.assignment.generic-db"
				2: patterns: [include: "etc#eql"]
			patterns: [{
				# Quoted encoding-name
				name:  "string.quoted.double.generic-db"
				begin: '\\G"'
				end:   '"'
				beginCaptures: 0: name: "punctuation.definition.string.begin.generic-db"
				endCaptures:   0: name: "punctuation.definition.string.end.generic-db"
				contentName: "entity.other.encoding.generic-db"
			},{
				# Unquoted encoding name
				name: "entity.other.encoding.generic-db"
				match: '\\G[^\\s]+'
			}]
		},{
			# Everything else
			name:  "meta.assignment.${1:/downcase}-field.generic-db"
			begin: "(?:^|\\G|(?<=\\s))(type|desc|icon)(=)"
			end:   "(?!\\G)"
			beginCaptures:
				1: name: "variable.assignment.generic-db"
				2: patterns: [include: "etc#eql"]
			patterns: [include: "etc#mime", {
				# Unquoted field fallback
				name:  "string.unquoted.field.generic-db"
				match: '\\G(?!")[^\\s]+'
			},{
				# Quoted field fallback
				name:  "string.quoted.double.field.generic-db"
				begin: '\\G"'
				end:   '"'
				beginCaptures: 0: name: "punctuation.definition.string.begin.generic-db"
				endCaptures:   0: name: "punctuation.definition.string.end.generic-db"
				patterns: [include: "etc#mime"]
			}]
		}]
